AWSTemplateFormatVersion: '2010-09-09'
Description: 'Project- T-1 VPC and Subnet Creation with Dynamic AZ and Subnet Allocation'

Parameters:
  NumberOfAZs:
    Type: Number
    Description: Enter 2 for second Availability Zone
    Default: 1
    MinValue: 1
    MaxValue: 2

  NumberOfPublicSubnetsAZ2:
    Type: Number
    Description: >
      Specifies the number of public subnets to be created in the second Availability Zone (AZ2).
      This parameter is applicable only if two Availability Zones are selected. If a single Availability Zone is used,
      this parameter defaults to 3, indicating three public subnets will be created in the first Availability Zone (AZ1).
      Enter 3 if going with AZ2.
    Default: 3
    MinValue: 1
    MaxValue: 3


Mappings:
  SubnetConfig:
    AZ1:
      PublicSubnet1: "10.0.1.0/24"
      PublicSubnet2: "10.0.2.0/24"
      PublicSubnet3: "10.0.3.0/24"

    AZ2:
      PublicSubnet1: "10.0.5.0/24"
      PublicSubnet2: "10.0.6.0/24"
      PublicSubnet3: "10.0.7.0/24"


Conditions:
    # UseAZ1 is true when at least one Availability Zone is selected. This condition always evaluates to true because the minimum NumberOfAZs is 1.
  UseAZ1: 
    !Not [!Equals [!Ref NumberOfAZs, 0]]
 
    # UseAZ2 is true when exactly two Availability Zones are selected. This condition controls the creation of resources in the second AZ.
  UseAZ2: 
    !Equals [!Ref NumberOfAZs, 2]
  
    # UseTwoPublicSubnets is true when the user chooses to create two public subnets in each Availability Zone.
  UseThreePublicSubnets: 
    !Equals [!Ref NumberOfPublicSubnetsAZ2, 3]

  UseAZ2AndUseThreePublicSubnets:
    Fn::And:
     - Condition: UseAZ2
     - Condition: UseThreePublicSubnets
Resources:
 # Create VPC, with CIDR value 16  so that enough IP's available
  MyLabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:  !Join ['', [!Ref "AWS::StackName", "-MyLabVPC" ]]
# Create Internet Gateway # DependsOn parameter is used here
  MyLabIGW:
    Type: AWS::EC2::InternetGateway
    DependsOn: MyLabVPC
    Properties:
      Tags:
        - Key: Name
          Value:  !Join ['', [!Ref "AWS::StackName", "-MyLabIGW" ]]
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyLabVPC
      InternetGatewayId: !Ref MyLabIGW

# Public Subnets AZ1
  PublicSubnet1AZ1:
    Type: 'AWS::EC2::Subnet'
    #Condition: UseAZ1
    Properties:
      VpcId: !Ref MyLabVPC
      CidrBlock: !FindInMap [SubnetConfig, AZ1, PublicSubnet1]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-PublicSubnet1AZ1" ]]

  PublicSubnet2AZ1:
    Type: 'AWS::EC2::Subnet'
    #Condition: !And [UseAZ1, UseTwoPublicSubnets] #Checking Use single AZ and two PublicSubnets are selected]
    Properties:
      VpcId: !Ref MyLabVPC
      CidrBlock: !FindInMap [SubnetConfig, AZ1, PublicSubnet2]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-PublicSubnet2AZ1"]]

  PublicSubnet3AZ1:
    Type: 'AWS::EC2::Subnet'
    #Condition: !And [UseAZ1, UseTwoPublicSubnets] #Checking Use single AZ and two PublicSubnets are selected]
    Properties:
      VpcId: !Ref MyLabVPC
      CidrBlock: !FindInMap [SubnetConfig, AZ1, PublicSubnet3]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-PublicSubnet3AZ1"]]
   # Public Subnets AZ2
  PublicSubnet1AZ2:
    Type: 'AWS::EC2::Subnet'
    Condition: UseAZ2
    Properties:
      VpcId: !Ref MyLabVPC
      CidrBlock: !FindInMap [SubnetConfig, AZ2, PublicSubnet1]
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-PublicSubnet1AZ2" ]]

  PublicSubnet2AZ2:
    Type: 'AWS::EC2::Subnet'
    #Condition: !And [UseAZ2, UseTwoPublicSubnets] #Checking Use two AZ and two Public Subnets are selected]
    Condition: UseAZ2AndUseThreePublicSubnets 
    Properties:
      VpcId: !Ref MyLabVPC
      CidrBlock: !FindInMap [SubnetConfig, AZ2, PublicSubnet2]
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-PublicSubnet2AZ2"]]

  PublicSubnet3AZ2:
    Type: 'AWS::EC2::Subnet'
    #Condition: !And [UseAZ1, UseTwoPublicSubnets] #Checking Use single AZ and two PublicSubnets are selected]
    Condition: UseAZ2AndUseThreePublicSubnets 

    Properties:
      VpcId: !Ref MyLabVPC
      CidrBlock: !FindInMap [SubnetConfig, AZ2, PublicSubnet3]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-PublicSubnet3AZ2"]]

# Public Routing Table for AZ1 and AZ2:
  PublicRouteTableAZ1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyLabVPC
      Tags:
        - Key: Name
          Value:  !Join ['', [!Ref "AWS::StackName", "-PublicRouteTableAZ1" ]]

  PublicRouteTableAZ2:
    Type: AWS::EC2::RouteTable
    Condition: UseAZ2
    Properties:
      VpcId: !Ref MyLabVPC
      Tags:
        - Key: Name
          Value:  !Join ['', [!Ref "AWS::StackName", "-PublicRouteTableAZ2" ]]

# Routes for Internet Gateway for each AZ1 and Az2
  PublicRouteAZ1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTableAZ1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyLabIGW

  PublicRouteAZ2:
    Type: AWS::EC2::Route
    Condition: UseAZ2   # Only creates if AZ2 is selected.
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTableAZ2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyLabIGW

# Associating Route Tables to Public Subnets in AZ1 and AZ2
  PublicSubnet1RouteTableAssociationAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1AZ1
      RouteTableId: !Ref PublicRouteTableAZ1
  PublicSubnet2RouteTableAssociationAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    #Condition: !And [UseAZ1, UseTwoPublicSubnets]
    Properties:
      SubnetId: !Ref PublicSubnet2AZ1
      RouteTableId: !Ref PublicRouteTableAZ1
  PublicSubnet3RouteTableAssociationAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    #Condition: !And [UseAZ1, UseTwoPublicSubnets]
    Properties:
      SubnetId: !Ref PublicSubnet3AZ1
      RouteTableId: !Ref PublicRouteTableAZ1

  PublicSubnet1RouteTableAssociationAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseAZ2
    Properties:
      SubnetId: !Ref PublicSubnet1AZ2
      RouteTableId: !Ref PublicRouteTableAZ2
  PublicSubnet2RouteTableAssociationAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    #Condition: !And [UseAZ2, UseTwoPublicSubnets]
    Condition: UseAZ2AndUseThreePublicSubnets 

    Properties:
      SubnetId: !Ref PublicSubnet2AZ2
      RouteTableId: !Ref PublicRouteTableAZ2
  PublicSubnet3RouteTableAssociationAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseAZ2AndUseThreePublicSubnets 

    #Condition: !And [UseAZ1, UseTwoPublicSubnets]
    Properties:
      SubnetId: !Ref PublicSubnet3AZ2
      RouteTableId: !Ref PublicRouteTableAZ2

Outputs:
  UserConfiguration:
    Description: "Configuration identifier representing the user's selections in this stack. It indicates the number of Availability Zones used and the number of public and private subnets in each AZ. This identifier is used by subsequent stacks to determine the appropriate resource creation based on the network configuration established here. Format: 'AZ{NumberOfAZs}P{NumberOfPublicSubnets}P{NumberOfPrivateSubnets}', e.g., 'AZ2P2P2' for two AZs, each with two public and two private subnets."
    Value: !Sub 
      - "AZ${NumberOfAZs}P${NumberOfPublicSubnetsAZ2}"
      - NumberOfAZs: !Ref NumberOfAZs
        NumberOfPublicSubnets: !Ref NumberOfPublicSubnetsAZ2
    Export:
      Name: !Sub "${AWS::StackName}-UserConfiguration" 

  VPCId:
    Description: "ID of the newly created VPC"
    Value: !Ref MyLabVPC
    Export:
      Name: netstackvpc

  PublicSubnet1AZ1Id:
    Description: "ID of Public Subnet 1 in AZ1"
    Value: !Ref PublicSubnet1AZ1
    Export:
      Name: PublicSubnet1AZ1Id
  #    Name: !Sub "${AWS::StackName}-PublicSubnet1AZ1Id"

  PublicSubnet2AZ1Id:
    Description: "ID of Public Subnet 2 in AZ1"
    Value: !Ref PublicSubnet2AZ1
    Export:
      Name: PublicSubnet2AZ1Id
   #   Name: !Sub "${AWS::StackName}-PublicSubnet2AZ1Id"
  PublicSubnet3AZ1Id:
    Description: "ID of Public Subnet 2 in AZ1"
    Value: !Ref PublicSubnet3AZ1
    Export:
      Name: PublicSubnet3AZ1Id
   #   Name: !Sub "${AWS::StackName}-PublicSubnet2AZ1Id"
  PublicRouteTableAZ1Id:
    Description: "ID of Public Route Table AZ1"
    Value: !Ref PublicRouteTableAZ1
    Export:
      Name: PublicRouteTableAZ1    
   #   Name: !Sub "${AWS::StackName}-PublicRouteTableAZ1Id"
      
  PublicSubnet1AZ2Id:
    Description: "ID of Public Subnet 1 in AZ2"
    Value: !Ref PublicSubnet1AZ2
    Condition: UseAZ2AndUseThreePublicSubnets 

  PublicSubnet2AZ2Id:
    Description: "ID of Public Subnet 2 in AZ2"
    Value: !Ref PublicSubnet2AZ2
    Condition: UseAZ2AndUseThreePublicSubnets 
  PublicSubnet3AZ2Id:
    Description: "ID of Public Subnet 2 in AZ2"
    Value: !Ref PublicSubnet3AZ2
    Condition: UseAZ2AndUseThreePublicSubnets 
    Export:
      Name: PublicSubnet3AZ2Id

 